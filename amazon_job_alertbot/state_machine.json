{
  "Comment": "State Machine for orchestrating Amazon Jobs alert bot",
  "StartAt": "SetParams",
  "States": {
    "SetParams": {
      "Type": "Pass",
      "Parameters": {
        "params.$": {
          "searchparams.$": "$.SearchSettings",
          "dbparams.$": "$.DBSettings",
          "sendparams.$": "$.SendSettings"
        }
      }
    },
    "InvokeJobScraper": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-east-1:019703030783:function:amzn_job_scraper",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
          "Lambda.ClientExecutionTimeoutException",
          "Lambda.ServiceException",
          "Lambda.AWSLambdaException",
          "Lambda.SdkClientException"
        ],
          "IntervalSeconds": 10,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "TimeoutSeconds": 600,
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ScraperError"
        }
      ],
      "ResultPath": "$.ScraperResult",
      "Next": "EvalScrapeResponse"
    },
    "ScraperError": {
      "Type": "Fail",
      "Error": "ScraperError",
      "Cause": "Failed to scrape jobs from Amazon"
    },
    "EvalScrapeResponse": {
      "Type": "Choice",
      "Choices": [
        {
          "jobs": "$.ScraperResult.jobs",
          "IsPresent": true,
          "Next": "InvokeJobStore"
        }
      ],
      "Default": "EndState"
    },
    "InvokeJobStore": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-east-1:019703030783:function:amzn_job_store",
        "StorePayload.$": {
          "dbparams": "$.dbparams",
          "jobs.$": "$.ScraperResult.jobs",
          "remaining_hits.$": "$.ScraperResult.remaining_hits"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ClientExecutionTimeoutException",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 5,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "TimeoutSeconds": 240,
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "DBError"
        }
      ],
      "ResultPath": "$.StoreResult",
      "Next": "CheckForJobs"
    },
    "DBError": {
      "Type": "Fail",
      "Error": "DBError",
      "Cause": "Failed to store jobs in database"
    },
    "CheckForJobs": {
      "Type": "Choice",
      "Choices": [
        {
        "Variable": "$.StoreResult.new_jobs",
        "IsPresent": true,
        "Next": "SplitBranch"
        }
      ],
      "Default": "EndState"
    },
    "SplitBranch": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "SendJobBatch",
            "States": {
            "SendJobBatch": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sqs:SendMessage",
                "Parameters": {
                  "QueueUrl": "https://sqs.us-east-1.amazonaws.com/019703030783/JobQueue",
                  "MessageBody": "$.StoreResult.new_jobs"
                },
                "Retry": [
                  {
                    "IntervalSeconds": 3,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "TimeoutSeconds": 30,
                "End": true
            }
          }
        },
        {
          "StartAt": "EvalStoreResponse",
          "States": {
          "EvalStoreResponse": {
          "Type": "Choice",
          "Choices": [
            {
              "And": [
                {
                  "Variable": "$.StoreResult.remaining_hits",
                  "NumericGreaterThan": 0
                },
                {
                  "Variable": "$.StoreResult.more_jobs",
                  "BooleanEquals": true
                },
                {
                  "Variable": "$.StoreResult.newest_scrape",
                  "IsPresent": true
                }
              ],
              "Next": "PassBackToInvoke"
            },
            {
              "Variable": "$.StoreResult.more_jobs",
              "BooleanEquals": false,
              "Next": "PassToSender"
            }
          ],
          "Default": "EndState"
          }
          }
        }
      ]
    },
    "PassBackToInvoke": {
      "Type": "Pass",
      "OutputPath": {
        "searchparams": "$.searchparams",
        "dbparams": "$.dbparams",
        "sendparams": "$.sendparams",
        "remaining_hits": "$.StoreResult.remaining_hits",
        "newest_scrape": "$.StoreResult.newest_scrape"
      },
      "Next": "InvokeJobScraper"
    },
    "PassToSender": {
      "Type": "Pass",
      "OutputPath": {
        "sendparams": "$.sendparams"
      }
},
    "InvokeSender": {
      "Type": "Task",
      "Resource": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
      "Parameters": {
        "FunctionName": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
        "sendparams": "$.sendparams"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ClientExecutionTimeoutException",
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 30,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "TimeoutSeconds": 60,
      "End": true
    },
    "EndState": {
      "Type": "Succeed"
    }
  }
