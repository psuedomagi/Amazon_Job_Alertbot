AWSTemplateFormatVersion: '2010-09-09'

Description: >
  CloudFormation template for automated deployment of Amazon Jobs alert agent.
  Creates a deployment role, lambda functions,
  a Step Function state machine, and necessary IAM roles and policies. Deletes role
  after creation.

Resources:

  AmznJobsAgentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'amzn-jobs-agent-bucket-${AWS::AccountId}-${AWS::Region}'

  RequestsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: requests-layer
      Description: Layer containing the requests library
      Content:
        S3Bucket: !Sub 'amzn-jobs-agent-bucket-${AWS::AccountId}-${AWS::Region}'
        S3Key: requests_layer.zip
      CompatibleRuntimes:
        - python3.8

  VarReplacerFunction:
      Type: AWS::Lambda::Function
      Properties:
        Handler: var_replacer.handler
        Role: !GetAtt LambdaExecutionRole.Arn
        Runtime: python3.11
        Code:
          S3Bucket: !Sub 'amzn-jobs-agent-bucket-${AWS::AccountId}-${AWS::Region}'
          S3Key: var_replacer.zip

    AmznJobScraperFunction:
      Type: AWS::Lambda::Function
      Properties:
        Handler: amzn_job_scraper.handler
        Role: !GetAtt LambdaExecutionRole.Arn
        Runtime: python3.11
        Code:
          S3Bucket: !Sub 'amzn-jobs-agent-bucket-${AWS::AccountId}-${AWS::Region}'
          S3Key: amzn_job_scraper.zip
        Layers:
          - !Ref RequestsLayer

    AmznJobStoreFunction:
      Type: AWS::Lambda::Function
      Properties:
        Handler: amzn_job_store.handler
        Role: !GetAtt AmznJobStoreRole.Arn
        Runtime: python3.11
        Code:
          S3Bucket: !Sub 'amzn-jobs-agent-bucket-${AWS::AccountId}-${AWS::Region}'
          S3Key: amzn_job_store.zip

    AmznJobSenderFunction:
      Type: AWS::Lambda::Function
      Properties:
        Handler: amzn_job_sender.handler
        Role: !GetAtt AmznJobSenderRole.Arn
        Runtime: python3.11
        Code:
          S3Bucket: !Sub 'amzn-jobs-agent-bucket-${AWS::AccountId}-${AWS::Region}'
          S3Key: amzn_job_sender.zip

    ErrorHandlerFunction:
      Type: AWS::Lambda::Function
      Properties:
        Handler: error_handler.handler
        Role: !GetAtt LambdaExecutionRole.Arn
        Runtime: python3.11
        Code:
          S3Bucket: !Sub 'amzn-jobs-agent-bucket-${AWS::AccountId}-${AWS::Region}'
          S3Key: error_handler.zip

    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: LambdaBasicPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"

    MyStateMachine:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        # State Machine configuration

    # DynamoDB Table
    AmznJobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # DynamoDB configuration

    # SQS Queue
    JobQueue:
      Type: AWS::SQS::Queue
      Properties:
        # SQS configuration

    # SNS Topic
    JobSubscriberTopic:
      Type: AWS::SNS::Topic
      Properties:
        # SNS configuration

    CloudBridge:
      Type: AWS::CloudBridge::Event
      Properties:
        # CloudBridge configuration

Outputs:
