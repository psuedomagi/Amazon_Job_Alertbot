AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Deploys necessary s3 bucket and CF deployment role for broader job agent deployment. This allows templates and functions to be uploaded by the deployment script in advance of the main template execution.
Parameters:
  YourEmail:
    Type: String
    AllowedPattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    Description: Your email address for the SNS topic
    NoEcho: true
  BaseName:
    Type: String
    Description: Base name for resources
    Default: job-agent
  BaseNameTitleCase:
    Type: String
    Description: Base name for resources using title case
    Default: JobAgent
  EventSchedule:
    Type: String
    Description: EventBridge schedule in appropriate format, e.g. rate(24 hours)
    Default: rate(24 hours)
  LangCode:
    Type: String
    Description: Language code for job agent, e.g. 'en'
    Default: en
  LangCountryCode:
    Type: String
    Description: Language country code for job agent, e.g. 'US'
    Default: US
  TagKey:
    Type: String
    Description: Common tag key for resources
    Default: JobAlertsAgent
  HashSuffix:
    Type: String
    Description:
      A random hash used to ensure a unique bucket name, appended as a
      suffix.
  UserArns:
    Type: CommaDelimitedList
    Description:
      ARN of the user, or if a federated user, a series of arns for the
      federation provider, permanent role, and assumed-role session
  ChildEnabled:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Description:
      Whether the child stack should be enabled, set to true to enable
      childstack
    Default: "false"
  TemplateFileName:
    Type: String
    Description: Name of the template file to be deployed in the child stack
    Default: cf-child-
  TemplateUrl:
    Type: String
    Description: URL of the template file to be deployed in the child stack
    Default: none
    NoEcho: true
  SelfArn:
    Type: String
    Description: ARN of the main stack once created
    Default: none
Conditions:
  CreateChildStack: !Equals
    - !Ref "ChildEnabled"
    - "true"
  SelfArnNotNone: !Not
    - !Equals
      - !Ref "SelfArn"
      - none
Resources:
  JobAgentStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateChildStack
    DependsOn: JobAgentBucketPolicy
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Ref "TemplateUrl"
      Parameters:
        BaseName: !Ref "BaseName"
        BaseNameTitleCase: !Ref "BaseNameTitleCase"
        YourEmail: !Ref "YourEmail"
        EventSchedule: !Ref "EventSchedule"
        LangCode: !Ref "LangCode"
        LangCountryCode: !Ref "LangCountryCode"
        TagKey: !Ref "TagKey"
        BucketName: !Ref "JobAgentBucket"
        BucketArn: !GetAtt "JobAgentBucket.Arn"
        HashSuffix: !Ref "HashSuffix"
        RootArn: !Ref "SelfArn"
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-child-stack"
        - Key: StackName
          Value: !Sub "${BaseName}-child-stack-${HashSuffix}"
  JobAgentCFDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "cloudformation.${AWS::URLSuffix}"
            Action: sts:AssumeRole
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-cf-deployment-role"
      Policies:
        - PolicyName: !Sub "${BaseNameTitleCase}DeploymentPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:*
                  - sts:*
                Resource:
                  - "*"
                Condition:
                  ForAnyValue:StringLikeIfExists:
                    aws:ResourceTag/${!Ref TagKey}: !Sub "${BaseName}*"
                    aws:ResourceTag/StackName: !Sub "${BaseName}"
              - Effect: Allow
                Action:
                  - tag:TagResource
                  - tag:UntagResource
                Resource:
                  - "*"
                Condition:
                  ForAllValues:StringEquals:
                    aws:TagKeys:
                      - !Ref "TagKey"
                      - StackName
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:GetRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:UpdateAssumeRolePolicy
                  - iam:PutRolePolicy
                  - iam:CreatePolicy
                  - iam:CreatePolicyVersion
                  - iam:CreateServiceLinkedRole
                  - iam:DeleteServiceBasedRole
                  - iam:DeletePolicy
                  - iam:CreateGroup
                  - iam:DeleteGroup
                  - iam:AttachGroupPolicy
                  - iam:DetachGroupPolicy
                  - iam:PutGroupPolicy
                  - iam:List*
                  - iam:PutRolePermissionsBoundary
                  - iam:DeleteRolePermissionsBoundary
                  - iam:SetDefaultPolicyVersion
                  - iam:TagRole
                  - iam:TagPolicy
                  - iam:UntagRole
                  - iam:UntagPolicy
                Resource:
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*${BaseNameTitleCase}*"
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${BaseNameTitleCase}*"
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:group/${BaseNameTitleCase}*"
                Condition:
                  StringLikeIfExists:
                    aws:ResourceTag/${!Ref TagKey}: !Sub "${BaseName}*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DeleteLogGroup
                  - logs:PutRetentionPolicy
                  - logs:Describe*
                  - logs:List*
                  - logs:Tag*
                  - logs:Untag*
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                Condition:
                  StringLikeIfExists:
                    aws:ResourceTag/${!Ref TagKey}: !Sub "${BaseName}*"
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:DeleteRule
                  - events:PutTargets
                  - events:RemoveTargets
                  - events:Describe*
                  - events:List*
                  - events:Tag*
                  - events:UnTag*
                  - organizations:ListAWSServiceAccessForOrganization
                Resource:
                  - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${BaseName}*"
                Condition:
                  StringLikeIfExists:
                    aws:ResourceTag/${!Ref TagKey}: !Sub "${BaseName}*"
              - Effect: Allow
                Action:
                  - states:CreateStateMachine
                  - states:DeleteStateMachine
                  - states:UpdateStateMachine
                  - states:DescribeStateMachine
                  - states:TagResource
                  - states:UntagResource
                  - states:Describe*
                  - states:List*
                  - organizations:ListAWSServiceAccessForOrganization
                Resource:
                  - !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${BaseNameTitleCase}*"
                Condition:
                  StringLikeIfExists:
                    aws:ResourceTag/${!Ref TagKey}: !Sub "${BaseName}*"
              - Effect: Allow
                Action:
                  - lambda:*
                  - organizations:ListAWSServiceAccessForOrganization
                Resource:
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${BaseName}*"
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:*"
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:var*"
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:error*"
              - Effect: Allow
                Action:
                  - sqs:CreateQueue
                  - sqs:DeleteQueue
                  - sqs:SetQueueAttributes
                  - sqs:Get*
                  - sqs:List*
                  - sqs:AddPermission
                  - sqs:RemovePermission
                  - sqs:TagQueue
                  - sqs:UntagQueue
                Resource:
                  - !Sub "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${BaseName}*"
                Condition:
                  StringLikeIfExists:
                    aws:ResourceTag/${!Ref TagKey}: !Sub "${BaseName}*"
              - Effect: Allow
                Action:
                  - sns:CreateTopic
                  - sns:DeleteTopic
                  - sns:SetTopicAttributes
                  - sns:Subscribe
                  - sns:Unsubscribe
                  - sns:Get*
                  - sns:List*
                  - sns:Tag*
                  - sns:Untag*
                  - sns:Set*
                  - sns:ConfirmSubscription
                  - sns:AddPermission
                  - sns:RemovePermission
                Resource:
                  - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${BaseName}*"
                Condition:
                  StringLikeIfExists:
                    aws:ResourceTag/${!Ref TagKey}: !Sub "${BaseName}*"
              - Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:UpdateTable
                  - dynamodb:DeleteTable
                  - dynamodb:List*
                  - dynamodb:Describe*
                  - dynamodb:Tag*
                  - dynamodb:Untag*
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BaseName}*"
                Condition:
                  StringLikeIfExists:
                    aws:ResourceTag/${!Ref TagKey}: !Sub "${BaseName}*"
              - Effect: Allow
                Action:
                  - s3:DeleteBucket
                  - s3:DeleteBucketPolicy
                  - s3:PutBucketTagging
                  - s3:PutEncryptionConfiguration
                  - s3:PutLifecycleConfiguration
                  - s3:PutBucketPolicy
                  - s3:PutBucketOwnershipControls
                  - s3:PutBucketLogging
                  - s3:PutBucketAcl
                  - s3:PutBucketVersioning
                  - s3:*Object
                  - s3:List*
                  - s3:Get*
                  - s3:Tag*
                  - s3:Untag*
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}"
                  - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}/*"
                Condition:
                  StringLikeIfExists:
                    aws:ResourceTag/${!Ref TagKey}: !Sub "${BaseName}*"
              - Effect: Allow
                Action:
                  - xray:PutTelemetryRecords
                  - xray:PutTraceSegments
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource:
                  - "*"
                Condition:
                  StringLikeIfExists:
                    aws:ResourceTag/${!Ref TagKey}: !Sub "${BaseName}*"
  JobAgentBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "${BaseName}-bucket-${HashSuffix}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
      LoggingConfiguration:
        LogFilePrefix: s3logs/
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
      IntelligentTieringConfigurations:
        - Id: job-agent-tiering
          Status: Enabled
          Tierings:
            - AccessTier: ARCHIVE_ACCESS
              Days: 250
            - AccessTier: DEEP_ARCHIVE_ACCESS
              Days: 400
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-bucket"
  JobAgentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref "JobAgentBucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "cloudformation.${AWS::URLSuffix}"
              AWS:
                - !Select
                  - 0
                  - !Ref "UserArns"
                - !Select
                  - 1
                  - !Ref "UserArns"
            Action:
              - s3:Get*
              - s3:List*
              - s3:*Object
              - s3:DeleteBucket
              - s3:PutBucketTagging
              - s3:DeleteBucketPolicy
              - s3:PutBucketPolicy
              - s3:ReplicateDelete
              - s3:PutMetricsConfiguration
              - s3:PutLifecycleConfiguration
              - s3:PutIntelligentTieringConfiguration
              - s3:PutEncryptionConfiguration
              - s3:PutBucketVersioning
              - s3:PutBucketOwnershipControls
              - s3:PutBucketObjectLockConfiguration
              - s3:PutBucketNotification
              - s3:PutBucketLogging
              - s3:PutBucketCORS
              - s3:PutAnalyticsConfiguration
              - s3:InitiateReplication
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}/*"
            Condition:
              StringLikeIfExists:
                aws:PrincipalTag/${!Ref TagKey}: !Sub "${BaseName}*"
          - Effect: Allow
            Principal:
              Service:
                - !Sub "cloudtrail.${AWS::URLSuffix}"
            Action:
              - s3:GetBucketAcl
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}"
            Condition:
              StringLikeIfExists:
                aws:PrincipalTag/${!Ref TagKey}: !Sub "${BaseName}*"
          - Effect: Allow
            Principal:
              Service:
                - !Sub "cloudtrail.${AWS::URLSuffix}"
            Action:
              - s3:PutObject
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}/AWSLogs/*"
            Condition:
              StringLikeIfExists:
                aws:PrincipalTag/${!Ref TagKey}: !Sub "${BaseName}*"
          - Effect: Allow
            Principal:
              Service: !Sub "lambda.${AWS::URLSuffix}"
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}/lambdas/*"
            Condition:
              StringLikeIfExists:
                aws:PrincipalTag/${!Ref TagKey}: !Sub "${BaseName}*"
          - Effect: Allow
            Principal:
              Service:
                - !Sub "states.${AWS::URLSuffix}"
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}/templates/*"
            Condition:
              StringLikeIfExists:
                aws:PrincipalTag/${!Ref TagKey}: !Sub "${BaseName}*"
Outputs:
  DeploymentRoleArn:
    Description: Arn for deployment role
    Value: !GetAtt "JobAgentCFDeploymentRole.Arn"
  JobAgentS3Name:
    Description: Name of S3 bucket
    Value: !Ref "JobAgentBucket"
  ChildStackId:
    Condition: CreateChildStack
    Description: Id of child stack
    Value: !Ref "JobAgentStack"
  Suffix:
    Description: Suffix for stack
    Value: !Ref "HashSuffix"
