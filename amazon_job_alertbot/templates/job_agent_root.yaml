AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Deploys all JobAgent resources in three batches using pseudo-child stacks, first setting base roles and infrastructure to enable script to upload templates and functions, and then finalizing implementation with all resources needed for the state machine, finally enables application insights once the stack is fully constructed.
Parameters:
  YourEmail:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
    Description: Your email address for the SNS topic
    ConstraintDescription: Must be a valid email address using Western characters
    NoEcho: true
  BaseName:
    Type: String
    Description: Base name for resources
    Default: job-agent
    MaxLength: 14
    MinLength: 4
    ConstraintDescription: Must only contain letters, numbers, and hyphens.
    AllowedPattern: ^[a-zA-Z0-9-]+$
  BaseNameTitleCase:
    Type: String
    Description: Base name for resources using title case
    Default: JobAgent
    MaxLength: 14
    MinLength: 2
    ConstraintDescription: Must contain only letters and numbers - no special characters. Preferably use title/camel case because... well... it's in the name
    AllowedPattern: "^[A-Za-z0-9]+$"
  EventSchedule:
    Type: String
    Description: EventBridge schedule in appropriate format, e.g. rate(24 hours)
    Default: rate(24 hours)
  LangCode:
    Type: String
    Description: Language code for job agent, e.g. 'en'
    Default: en
    ConstraintDescription: Must be a valid lower case two-letter ISO 639 set 1 language code
    MaxLength: 2
    MinLength: 2
    AllowedPattern: "^[a-z]+$"
  IETFCode:
    Type: String
    Description: Valid IETF language tag, see "https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry"
    Default: en-US
    ConstraintDescription: Must be a valid uppercase two-letter country code
    MaxLength: 8
    MinLength: 2
    AllowedPattern: "^[a-zA-Z0-9-]+$"
  TagKey:
    Type: String
    Description: Common tag key for resources
    Default: jobalertsagent
    AllowedPattern: "^[a-z0-9-]+$"
    ConstraintDescription: Must contain only lowercase letters, numbers and hyphens.
  HashSuffix:
    Type: String
    Description:
      A random hash used to ensure a unique bucket name, appended as a
      suffix.
    ConstraintDescription: Must contain only letters and numbers and be 12 characters long
    AllowedPattern: "^[a-zA-Z0-9]+$"
    MaxLength: 12
    MinLength: 12
  UserArns:
    Type: CommaDelimitedList
    Description:
      ARN of the user, or if a federated user, a series of arns for the
      federation provider, permanent role, and assumed-role session
  ChildEnabled:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Description:
      Whether the child stack should be enabled, set to true to enable
      childstack
    Default: "false"
  StackName:
    Type: String
    Description: Name of the stack used for ApplicationInsights under CreateChildStack condition.
    Default: "none"
Conditions:
  CreateChildStack: !Equals
    - !Ref "ChildEnabled"
    - "true"
Transform: AWS::Serverless-2016-10-31
Resources:
  CFNPermissionBoundaryPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${BaseName}-cfn-mgmt-perm-boundary"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Sid: CloudformationPermissionBoundaryBaseline
            Action:
              - cloudformation:*
              - cloudtrail:*
              - dynamodb:*
              - events:*
              - iam:AttachRolePolicy
              - iam:CreatePolicy
              - iam:CreatePolicyVersion
              - iam:CreateRole
              - iam:CreateServiceLinkedRole
              - iam:DeletePolicy
              - iam:DeletePolicyVersion
              - iam:DeleteRole
              - iam:DeleteRolePermissionsBoundary
              - iam:DeleteRolePolicy
              - iam:DeleteServiceLinkedRole
              - iam:DetachRolePolicy
              - iam:GetPolicy
              - iam:GetPolicyVersion
              - iam:GetRole
              - iam:GetRolePolicy
              - iam:GetServiceLinkedRoleDeletionStatus
              - iam:ListAttachedRolePolicies
              - iam:ListPolicies
              - iam:ListRolePolicies
              - iam:ListRoles
              - iam:PutRolePermissionsBoundary
              - iam:PutRolePolicy
              - iam:SetDefaultPolicyVersion
              - iam:UpdateRole
              - iam:UpdateRoleDescription
              - iam:TagPolicy
              - iam:TagRole
              - iam:UntagPolicy
              - iam:UntagRole
              - lambda:*
              - logs:*
              - organizations:ListAWSServiceAccessForOrganization
              - rds:*
              - resource-groups:*
              - resource-manager:*
              - s3:*
              - sns:*
              - sns:*
              - sqs:*
              - ssm:*
              - sso:*
              - states:*
              - sts:*
              - sso:*
              - tag:*
              - xray:*
            Resource: "*"
  StateMachinePermissionBoundaryPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${BaseName}-state-machine-management-permboundary"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Sid: StateMachinePermissionBoundaryBaseline
            Action:
              - events:*
              - lambda:*
              - logs:*
              - organizations:ListAWSServiceAccessForOrganization
              - s3:*
              - sns:*
              - sqs:*
              - states:*
              - sts:*
              - xray:*
            Resource: "*"
  LambdaPermissionBoundaryPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${BaseName}-lambda-management-permboundary"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Sid: LambdaPermissionBoundaryBaseline
            Action:
              - dynamodb:*
              - logs:*
              - rds:*
              - s3:*
              - sns:*
              - sqs:*
              - sts:*
              - xray:*
            Resource: "*"
  JobAgentCFManagementRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role for managing the stack after creation.
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: stack-resource
      PermissionsBoundary: !Ref CFNPermissionBoundaryPolicy
      RoleName: !Sub "${AWS::Region}-${BaseName}-cfn-mgmt-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub cloudformation.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CFManagementRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CFManagerPolicy
                Effect: Allow
                Action:
                  - cloudformation:*
                  - cloudtrail:*
                Resource: "*"
              - Sid: ManageStackIAMRolesAndPolicies
                Effect: Allow
                Action:
                  - iam:AttachRolePolicy
                  - iam:CreatePolicy
                  - iam:CreatePolicyVersion
                  - iam:CreateRole
                  - iam:CreateServiceLinkedRole
                  - iam:DeletePolicy
                  - iam:DeletePolicyVersion
                  - iam:DeleteRole
                  - iam:DeleteRolePermissionsBoundary
                  - iam:DeleteRolePolicy
                  - iam:DeleteServiceLinkedRole
                  - iam:DetachRolePolicy
                  - iam:GetPolicy
                  - iam:GetPolicyVersion
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:GetServiceLinkedRoleDeletionStatus
                  - iam:ListAttachedRolePolicies
                  - iam:ListPolicies
                  - iam:ListRolePolicies
                  - iam:ListRoles
                  - iam:PutRolePermissionsBoundary
                  - iam:PutRolePolicy
                  - iam:SetDefaultPolicyVersion
                  - iam:TagPolicy
                  - iam:TagRole
                  - iam:UntagPolicy
                  - iam:UntagRole
                  - iam:UpdateRole
                  - iam:UpdateRoleDescription
                Resource:
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${BaseName}*"
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${BaseName}*"
              - Sid: ManageSSOApp
                Effect: Allow
                Action:
                  - sso:ListApplication*
                  - sso:DescribeApplication*
                  - sso:GetApplication*
                  - sso:ListTagsForResource
                  - sso:PutApplication*
                  - sso:DeleteApplication*
                  - sso:UpdateApplication*
                Resource: "*"
              - Sid: ManageStackTagging
                Effect: Allow
                Action:
                  - applicationinsights:TagResource
                  - applicationinsights:UntagResource
                  - dynamodb:Tag*
                  - dynamodb:Untag*
                  - events:Tag*
                  - events:Untag*
                  - logs:Tag*
                  - logs:Untag*
                  - s3:PutBucketTagging
                  - s3:PutObjectTagging
                  - s3:Tag*
                  - s3:Untag*
                  - sns:Tag*
                  - sns:Untag*
                  - sqs:TagQueue
                  - sqs:UntagQueue
                  - sso:TagResource
                  - sso:UntagResource
                  - states:TagResource
                  - states:UntagResource
                  - tag:GetResources
                  - tag:GetTagKeys
                  - tag:GetTagValues
                  - tag:TagResources
                  - tag:UntagResources
                Resource: "*"
                Condition:
                  StringLikeIfExists:
                    "aws:RequestTag/jobalertsagent": !Ref TagKey
                    "aws:RequestTag/StackName": "*"
                    "aws:RequestTag/AppManagerCFNStackKey": "*"
                    "aws:RequestTag/aws:cloudformation": "*"
              - Sid: ManageStackApplicationInsights
                Effect: Allow
                Action:
                  - applicationinsights:*
                Resource: "*"
                Condition:
                  StringLikeIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
              - Sid: ManageStackResourceGroup
                Effect: Allow
                Action:
                  - resource-groups:*
                Resource: "*"
              - Sid: ManageStackLogging
                Effect: Allow
                Action:
                  - logs:*
                Resource: "*"
              - Effect: Allow
                Sid: AllowEventBridgePermissionsMgmtForCloudFormRole
                Action:
                  - events:DeleteRule
                  - events:Describe*
                  - events:List*
                  - events:PutRule
                  - events:PutTargets
                  - events:RemoveTargets
                  - organizations:ListAWSServiceAccessForOrganization
                Resource:
                  - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${BaseName}*"
              - Effect: Allow
                Sid: AllowStateMachineMgmtForCloudFormRole
                Action:
                  - organizations:ListAWSServiceAccessForOrganization
                  - states:CreateStateMachine
                  - states:DeleteStateMachine
                  - states:Describe*
                  - states:DescribeStateMachine
                  - states:List*
                  - states:UpdateStateMachine
                Resource:
                  - !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${BaseNameTitleCase}*"
                Condition:
                  StringEqualsIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
              - Effect: Allow
                Sid: AllowLambdaControlForJobAgentCloudFormResources
                Action:
                  - lambda:*
                  - organizations:ListAWSServiceAccessForOrganization
                Resource:
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${BaseName}*"
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:*"
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:var*"
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:error*"
                Condition:
                  StringEqualsIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
              - Effect: Allow
                Sid: AllowSQSMgmtForJobAgentQueue
                Action:
                  - sqs:AddPermission
                  - sqs:CreateQueue
                  - sqs:DeleteQueue
                  - sqs:Get*
                  - sqs:List*
                  - sqs:RemovePermission
                  - sqs:SetQueueAttributes
                Resource:
                  - !Sub "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${BaseName}*"
                Condition:
                  StringEqualsIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
              - Effect: Allow
                Sid: AllowSNSSnsMgmtForJobAgentQueue
                Action:
                  - sns:AddPermission
                  - sns:ConfirmSubscription
                  - sns:CreateTopic
                  - sns:DeleteTopic
                  - sns:Get*
                  - sns:List*
                  - sns:RemovePermission
                  - sns:Set*
                  - sns:SetTopicAttributes
                  - sns:Subscribe
                  - sns:Unsubscribe
                Resource:
                  - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${BaseName}*"
                Condition:
                  StringEqualsIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
              - Effect: Allow
                Sid: AllowTableMgmtForJobAgent
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:DeleteTable
                  - dynamodb:Describe*
                  - dynamodb:List*
                  - dynamodb:UpdateTable
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BaseName}*"
                Condition:
                  StringEqualsIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
              - Effect: Allow
                Sid: AllowS3MgmtForJobAgentCloudFormRole
                Action:
                  - s3:*Object
                  - s3:DeleteBucket
                  - s3:DeleteBucketPolicy
                  - s3:Get*
                  - s3:List*
                  - s3:PutBucketAcl
                  - s3:PutBucketLogging
                  - s3:PutBucketOwnershipControls
                  - s3:PutBucketPolicy
                  - s3:PutBucketVersioning
                  - s3:PutEncryptionConfiguration
                  - s3:PutLifecycleConfiguration
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}"
                  - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}/*"
                Condition:
                  StringEqualsIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
              - Effect: Allow
                Sid: AllowTracingForCloudFormRole
                Action:
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                  - xray:PutTelemetryRecords
                  - xray:PutTraceSegments
                Resource: "*"
                Condition:
                  StringEqualsIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
  JobAgentBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "${BaseName}-bucket-${HashSuffix}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
      LoggingConfiguration:
        LogFilePrefix: s3logs/
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
      IntelligentTieringConfigurations:
        - Id: job-agent-tiering
          Status: Enabled
          Tierings:
            - AccessTier: ARCHIVE_ACCESS
              Days: 250
            - AccessTier: DEEP_ARCHIVE_ACCESS
              Days: 400
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: stack-resource
  JobAgentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref "JobAgentBucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: AllowCloudFormationRoleManager
            Principal:
              Service:
                - !Sub "cloudformation.${AWS::URLSuffix}"
              AWS:
                - !Select
                  - 0
                  - !Ref "UserArns"
                - !Select
                  - 1
                  - !Ref "UserArns"
            Action:
              - s3:*Object
              - s3:DeleteBucket
              - s3:DeleteBucketPolicy
              - s3:Get*
              - s3:InitiateReplication
              - s3:List*
              - s3:PutAnalyticsConfiguration
              - s3:PutBucketCORS
              - s3:PutBucketLogging
              - s3:PutBucketNotification
              - s3:PutBucketObjectLockConfiguration
              - s3:PutBucketOwnershipControls
              - s3:PutBucketPolicy
              - s3:PutBucketTagging
              - s3:PutBucketVersioning
              - s3:PutEncryptionConfiguration
              - s3:PutIntelligentTieringConfiguration
              - s3:PutLifecycleConfiguration
              - s3:PutMetricsConfiguration
              - s3:ReplicateDelete
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}/*"
          - Effect: Allow
            Sid: AllowCloudTrailToReadBucketACL
            Principal:
              Service:
                - !Sub "cloudtrail.${AWS::URLSuffix}"
            Action:
              - s3:GetBucketAcl
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}"
          - Effect: Allow
            Sid: AllowCloudTrailToWriteLogsToBucket
            Principal:
              Service:
                - !Sub "cloudtrail.${AWS::URLSuffix}"
            Action:
              - s3:PutObject
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}/AWSLogs/*"
          - Effect: Allow
            Sid: AllowLambdaToReadAndGetObjectsForLambdas
            Principal:
              Service: !Sub "lambda.${AWS::URLSuffix}"
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}/lambdas/*"
          - Effect: Allow
            Sid: AllowStateMachineAccessToObjectTemplatesOnly
            Principal:
              Service:
                - !Sub "states.${AWS::URLSuffix}"
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${JobAgentBucket}/templates/*"
  JobAgentLambdaBaseRole:
    Type: AWS::IAM::Role
    Condition: CreateChildStack
    Properties:
      RoleName: !Sub "${AWS::Region}-${BaseName}-lambda-base-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref "JobAgentBaseLogAndTracePolicy"
      PermissionsBoundary: !Ref LambdaPermissionBoundaryPolicy
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: app-resource
  JobAgentCloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Sub "${BaseNameTitleCase}Trail"
      CloudWatchLogsLogGroupArn: !GetAtt "CloudTrailLogGroup.Arn"
      CloudWatchLogsRoleArn: !GetAtt "JobAgentCloudTrailCloudWatchRole.Arn"
      S3BucketName: !Ref JobAgentBucket
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: false
      EnableLogFileValidation: true
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: log-resource
  CloudTrailLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: 14
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: log-resource
  JobAgentCloudTrailCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "cloudtrail.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${BaseNameTitleCase}TrailLogPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowTrailAccessToLogDelivery
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt "CloudTrailLogGroup.Arn"
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: log-resource
  JobAgentStoreTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub "${BaseName}-store"
      AttributeDefinitions:
        - AttributeName: id_icims
          AttributeType: S
        - AttributeName: last_updated
          AttributeType: S
        - AttributeName: last_scrape
          AttributeType: S
        - AttributeName: posted_date
          AttributeType: S
        - AttributeName: date_off_market
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      ContributorInsightsSpecification:
        Enabled: true
      DeletionProtectionEnabled: false
      GlobalSecondaryIndexes:
        - IndexName: last_scrape-index
          ContributorInsightsSpecification:
            Enabled: true
          KeySchema:
            - AttributeName: last_scrape
              KeyType: HASH
            - AttributeName: id_icims
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: date_off_market-index
          ContributorInsightsSpecification:
            Enabled: true
          KeySchema:
            - AttributeName: id_icims
              KeyType: HASH
            - AttributeName: date_off_market
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      KeySchema:
        - AttributeName: id_icims
          KeyType: HASH
        - AttributeName: last_updated
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: posted_date-index
          KeySchema:
            - AttributeName: id_icims
              KeyType: HASH
            - AttributeName: posted_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TableClass: STANDARD_INFREQUENT_ACCESS
      SSESpecification:
        SSEEnabled: false
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
  JobQueue:
    Type: AWS::SQS::Queue
    Condition: CreateChildStack
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      QueueName: !Sub "${BaseName}-queue-${AWS::AccountId}.fifo"
      FifoQueue: true
      MessageRetentionPeriod: 160000
      VisibilityTimeout: 400
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
  JobQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Condition: CreateChildStack
    Properties:
      Queues:
        - !Ref "JobQueue"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: StateMachineQueueSendAccess
            Effect: Allow
            Principal:
              Service:
                - !Sub "states.${AWS::URLSuffix}"
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt "JobQueue.Arn"
          - Sid: LambdaSQSJobQueueAccess
            Effect: Allow
            Action:
              - sqs.DeleteMessage
              - sqs.GetQueueAttributes
              - sqs.PurgeQueue
              - sqs.ReceiveMessage
            Resource: !GetAtt "JobQueue.Arn"
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
  JobSubscriberTopic:
    Type: AWS::SNS::Topic
    Condition: CreateChildStack
    Properties:
      ContentBasedDeduplication: true
      DisplayName: AMZN Job Agent Report
      FifoTopic: true
      TopicName: !Sub "${BaseName}-topic.fifo"
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: app-resource
  JobSubscriberTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Condition: CreateChildStack
    Properties:
      Topics:
        - !Ref "JobSubscriberTopic"
      PolicyDocument:
        Id: !Sub ${BaseNameTitleCase}TopicPolicy
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Sid: LambdaSNSJobSubAccess
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
            Action:
              - sns:GetTopicAttributes
              - sns:Publish
              - sns:Subscribe
            Resource:
              - !Ref "JobSubscriberTopic"
          - Effect: Allow
            Sid: CloudFormationSNSJobSubAccess
            Principal:
              Service:
                - !Sub "cloudformation.${AWS::URLSuffix}"
            Action:
              - sns:AddPermission
              - sns:DeleteTopic
              - sns:GetDataProtectionPolicy
              - sns:GetTopicAttributes
              - sns:ListSubscriptionsByTopic
              - sns:ListTagsForResource
              - sns:PutDataProtectionPolicy
              - sns:Subscribe
            Resource:
              - !Ref "JobSubscriberTopic"
  JobAgentBaseLogAndTracePolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: CreateChildStack
    Properties:
      Description: !Sub "Managed policy for ${BaseNameTitleCase} lambda functions"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowBasicLambdaLogTraceAccess
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
            Resource: "*"
  JobAgentTriggerEventRole:
    Type: AWS::IAM::Role
    Condition: CreateChildStack
    Properties:
      RoleName: !Sub "${AWS::Region}-${BaseName}-events-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "events.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref JobAgentBaseLogAndTracePolicy
      Policies:
        - PolicyName: !Sub "${BaseNameTitleCase}TriggerEventRolePolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowTriggerEventToStartStateMachine
                Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${BaseNameTitleCase}-StateMachine"
                  - !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:execution:${BaseNameTitleCase}-StateMachine:*"
                Condition:
                  StringEqualsIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: app-resource
  VarReplacerFunction:
    Type: AWS::Lambda::Function
    Condition: CreateChildStack
    Properties:
      FunctionName: !Sub "${BaseName}-var-replacer"
      Handler: var_replacer.var_replacer_handler
      Role: !GetAtt "JobAgentLambdaBaseRole.Arn"
      Runtime: python3.11
      LoggingConfig:
        ApplicationLogLevel: TRACE
        LogFormat: JSON
        SystemLogLevel: DEBUG
      TracingConfig:
        Mode: Active
      Code:
        S3Bucket: !Ref "JobAgentBucket"
        S3Key: lambdas/var_replacer.zip
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: app-resource

  RequestsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: Requests
      Description: v.2.23.0
      ContentUri:
        Bucket: awsserverlessrepo-changesets-plntc6bfnfj
        Key: "019703030783/arn:aws:serverlessrepo:us-east-1:554326023307:applications-Requests-versions-2.25.0/262f4b00-2614-4331-9b74-03d24d3b41eb"
      CompatibleRuntimes:
        - python3.6
        - python3.7
        - python3.8
        - python3.11
  JobAgentScraperFunction:
    Type: AWS::Lambda::Function
    Condition: CreateChildStack
    Properties:
      FunctionName: !Sub "${BaseName}-job-scraper"
      Handler: job_scraper.job_scraper_handler
      Role: !GetAtt "JobAgentLambdaBaseRole.Arn"
      Runtime: python3.11
      LoggingConfig:
        ApplicationLogLevel: TRACE
        LogFormat: JSON
        SystemLogLevel: DEBUG
      TracingConfig:
        Mode: Active
      Code:
        S3Bucket: !Ref "JobAgentBucket"
        S3Key: lambdas/job_scraper.zip
      Layers:
        - !Ref RequestsLayer
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: app-resource

  JobAgentLambdaStoreRole:
    Type: AWS::IAM::Role
    Condition: CreateChildStack
    Properties:
      RoleName: !Sub "${AWS::Region}-${BaseName}-lambda-store-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      PermissionsBoundary: !Ref LambdaPermissionBoundaryPolicy
      Policies:
        - PolicyName: !Sub "${BaseNameTitleCase}StoreLambdaLogPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Sid: AllowLambdaStoreAgentDynamoDBAccess
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt "JobAgentStoreTable.Arn"
                Condition:
                  StringEqualsIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
      ManagedPolicyArns:
        - !Ref JobAgentBaseLogAndTracePolicy
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: app-resource
  JobAgentStoreFunction:
    Type: AWS::Lambda::Function
    Condition: CreateChildStack
    Properties:
      FunctionName: !Sub "${BaseName}-job-store"
      Handler: job_store.job_store_handler
      Role: !GetAtt "JobAgentLambdaStoreRole.Arn"
      Runtime: python3.11
      LoggingConfig:
        ApplicationLogLevel: TRACE
        LogFormat: JSON
        SystemLogLevel: DEBUG
      TracingConfig:
        Mode: Active
      Code:
        S3Bucket: !Ref JobAgentBucket
        S3Key: lambdas/job_store.zip
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: app-resource

  JobAgentLambdaSenderRole:
    Type: AWS::IAM::Role
    Condition: CreateChildStack
    Properties:
      RoleName: !Sub "${AWS::Region}-${BaseName}-lambda-sender-role"
      PermissionsBoundary: !Ref LambdaPermissionBoundaryPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "lambda.${AWS::URLSuffix}"
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref JobAgentBaseLogAndTracePolicy
      Policies:
        - PolicyName: !Sub "${BaseNameTitleCase}LambdaSenderPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Sid: AllowLambdaSenderAgentSQSAccess
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:PurgeQueue
                  - sqs:ReceiveMessage
                Resource: !GetAtt "JobQueue.Arn"
                Condition:
                  StringEqualsIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
              - Effect: Allow
                Sid: AllowLambdaSenderAgentSNSPubOnly
                Action:
                  - sns:Publish
                Resource: !Ref "JobSubscriberTopic"
                Condition:
                  StringEqualsIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: app-resource

  JobAgentSenderFunction:
    Type: AWS::Lambda::Function
    Condition: CreateChildStack
    Properties:
      FunctionName: !Sub "${BaseName}-job-sender"
      Handler: job_sender.job_sender_handler
      Role: !GetAtt "JobAgentLambdaSenderRole.Arn"
      Runtime: python3.11
      Code:
        S3Bucket: !Ref "JobAgentBucket"
        S3Key: lambdas/job_sender.zip
      LoggingConfig:
        ApplicationLogLevel: TRACE
        LogFormat: JSON
        SystemLogLevel: DEBUG
      TracingConfig:
        Mode: Active
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: app-resource

  ErrorHandlerFunction:
    Type: AWS::Lambda::Function
    Condition: CreateChildStack
    Properties:
      FunctionName: !Sub "${BaseName}-error-handler"
      Handler: error_handler.error_handler_handler
      Role: !GetAtt "JobAgentLambdaBaseRole.Arn"
      Runtime: python3.11
      LoggingConfig:
        ApplicationLogLevel: TRACE
        LogFormat: JSON
        SystemLogLevel: DEBUG
      TracingConfig:
        Mode: Active
      Code:
        S3Bucket: !Ref "JobAgentBucket"
        S3Key: lambdas/error_handler.zip
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: app-resource

  JobAgentStateMachineExecutionRole:
    Type: AWS::IAM::Role
    Condition: CreateChildStack
    Properties:
      RoleName: !Sub "${AWS::Region}-${BaseName}-state-machine-execution-role"
      PermissionsBoundary: !Ref StateMachinePermissionBoundaryPolicy
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: app-resource
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "states.${AWS::URLSuffix}"
                - !Sub "delivery.logs.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${BaseNameTitleCase}StateMachineExecutionPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Sid: AllowStateMachineExecution
                Action:
                  - states:CreateStateMachine
                  - states:DescribeExecution
                  - states:ListExecutions
                  - states:ListStateMachines
                  - states:StartExecution
                  - states:StopExecution
                  - states:TagResource
                  - states:UpdateStateMachine
                Resource: !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${BaseNameTitleCase}-StateMachine"
                Condition:
                  StringEquals:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
              - Effect: Allow
                Sid: AllowDeliveryAccess
                Action:
                  - logs:CreateDelivery
                  - logs:CreateLogDelivery
                  - logs:CreateLogStream
                  - logs:DeleteLogDelivery
                  - logs:DescribeDeliveryDestinations
                  - logs:DescribeDeliverySources
                  - logs:DescribeLogDeliveries
                  - logs:DescribeLogGroups
                  - logs:DescribeResourcePolicies
                  - logs:GetDelivery
                  - logs:GetDeliveryDestination
                  - logs:GetDeliveryDestinationPolicy
                  - logs:GetDeliverySource
                  - logs:GetLogDelivery
                  - logs:ListLogDeliveries
                  - logs:ListTagsForResource
                  - logs:PutDeliveryDestination
                  - logs:PutDeliveryDestinationPolicy
                  - logs:PutDeliverySource
                  - logs:PutLogEvents
                  - logs:PutResourcePolicy
                  - logs:TagResource
                  - logs:UpdateLogDelivery
                Resource: "*"
              - Effect: Allow
                Sid: AllowStateMachineLambdaInvokeForJobAgent
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt "JobAgentScraperFunction.Arn"
                  - !GetAtt "JobAgentStoreFunction.Arn"
                  - !GetAtt "JobAgentSenderFunction.Arn"
                  - !GetAtt "ErrorHandlerFunction.Arn"
                  - !GetAtt "VarReplacerFunction.Arn"
                Condition:
                  StringEquals:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
              - Effect: Allow
                Sid: AllowStateMachineSendSQSMessageOnly
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt "JobQueue.Arn"
                Condition:
                  StringEquals:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
              - Effect: Allow
                Sid: AllowBasicS3AccessForStateMachine
                Action:
                  - s3:GetBucketAcl
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectVersionAcl
                  - s3:GetObjectVersionTagging
                Resource:
                  - !GetAtt "JobAgentBucket.Arn"
                  - !Sub "${JobAgentBucket.Arn}/templates/*"
                Condition:
                  StringEqualsIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
              - Effect: Allow
                Sid: AllowStateMachineXrayTracing
                Action:
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                  - xray:PutTelemetryRecords
                  - xray:PutTraceSegments
                Resource: "*"
                Condition:
                  StringEqualsIfExists:
                    "aws:ResourceTag/jobalertsagent": !Ref TagKey
  JobAgentStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "${BaseNameTitleCase}-StateMachine-LogGrp"
      RetentionInDays: 14
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: log-resource
  JobAgentStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Condition: CreateChildStack
    Properties:
      StateMachineName: !Sub "${BaseNameTitleCase}-StateMachine"
      RoleArn: !GetAtt "JobAgentStateMachineExecutionRole.Arn"
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt "JobAgentStateMachineLogGroup.Arn"
        IncludeExecutionData: true
        Level: ALL
      TracingConfiguration:
        Enabled: true
      DefinitionSubstitutions:
        JobAgentScraperFunctionArn: !GetAtt "JobAgentScraperFunction.Arn"
        JobAgentStoreFunctionArn: !GetAtt "JobAgentStoreFunction.Arn"
        JobAgentSenderFunctionArn: !GetAtt "JobAgentSenderFunction.Arn"
        JobAgentStoreTableName: !Ref "JobAgentStoreTable"
        JobAgentStoreTableArn: !GetAtt "JobAgentStoreTable.Arn"
        ErrorHandlerFunctionArn: !GetAtt "ErrorHandlerFunction.Arn"
        VarReplacerFunctionArn: !GetAtt "VarReplacerFunction.Arn"
        JobQueueUrl: !Ref "JobQueue"
        SNSJobSubscriberTopicArn: !Ref "JobSubscriberTopic"
        SNSJobSubscriberTopicName: !GetAtt "JobSubscriberTopic.TopicName"
      StateMachineType: STANDARD
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
        - Key: !Sub "${BaseName}rsc_grp"
          Value: app-resource
      DefinitionString: |
        {
          "Comment": "State Machine for orchestrating Amazon Jobs alert bot",
          "StartAt": "ReplaceParams",
          "States": {
            "ReplaceParams": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:lambda:invoke",
              "Parameters": {
                "FunctionName": "${VarReplacerFunctionArn}",
                "Payload.$": "$"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ClientExecutionTimeoutException",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 5,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "TimeoutSeconds": 180,
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.errorInfo",
                  "Next": "HandleError"
                }
              ],
              "Next": "InvokeJobScraper"
            },
            "InvokeJobScraper": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:lambda:invoke",
              "Parameters": {
                "FunctionName": "${JobAgentScraperFunctionArn}",
                "Payload.$": "$"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ClientExecutionTimeoutException",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 10,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "TimeoutSeconds": 600,
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.errorInfo",
                  "Next": "HandleError"
                }
              ],
              "ResultPath": "$.ScraperResult",
              "Next": "EvalScrapeResponse"
            },
            "EvalScrapeResponse": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.ScraperResult.jobs",
                  "IsPresent": true,
                  "Next": "InvokeJobStore"
                }
              ],
              "Default": "EndState"
            },
            "InvokeJobStore": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:lambda:invoke",
              "Parameters": {
                "FunctionName": "${JobAgentStoreFunctionArn}",
                "Payload": {
                  "dbparams": "$.dbparams",
                  "jobs.$": "$.ScraperResult.jobs",
                  "remaining_hits.$": "$.ScraperResult.remaining_hits",
                  "tablename": "${JobAgentStoreTableName}",
                  "tablearn": "${JobAgentStoreTableArn}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ClientExecutionTimeoutException",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 5,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "TimeoutSeconds": 240,
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.errorInfo",
                  "Next": "HandleError"
                }
              ],
              "ResultPath": "$.StoreResult",
              "Next": "CheckForJobs"
            },
            "CheckForJobs": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.StoreResult.new_jobs",
                  "IsPresent": true,
                  "Next": "SplitBranch"
                }
              ],
              "Default": "EndState"
            },
            "SplitBranch": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "SendJobBatch",
                  "States": {
                    "SendJobBatch": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
                      "Parameters": {
                        "QueueUrl": "${JobQueueUrl}",
                        "MessageBody.$": "$.StoreResult.new_jobs"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ClientExecutionTimeoutException",
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException"
                          ],
                          "IntervalSeconds": 3,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "TimeoutSeconds": 30,
                      "End": true
                    }
                  }
                }
              ],
              "Next": "EvalStoreResponse"
            },
            "EvalStoreResponse": {
              "Type": "Choice",
              "Choices": [
                {
                  "And": [
                    {
                      "Variable": "$.StoreResult.remaining_hits",
                      "NumericGreaterThan": 0
                    },
                    {
                      "Variable": "$.StoreResult.more_jobs",
                      "BooleanEquals": true
                    },
                    {
                      "Variable": "$.StoreResult.newest_scrape",
                      "IsPresent": true
                    }
                  ],
                  "Next": "PassBackToInvoke"
                },
                {
                  "Variable": "$.StoreResult.more_jobs",
                  "BooleanEquals": false,
                  "Next": "PassToSender"
                }
              ],
              "Default": "EndState"
            },
            "PassBackToInvoke": {
              "Type": "Pass",
              "Parameters": {
                "searchparams.$": "$.searchparams",
                "dbparams.$": "$.dbparams",
                "sendparams.$": "$.sendparams",
                "remaining_hits.$": "$.StoreResult.remaining_hits",
                "newest_scrape.$": "$.StoreResult.newest_scrape"
              },
              "Next": "InvokeJobScraper"
            },
            "PassToSender": {
              "Type": "Pass",
              "Parameters": {
                "sendparams": "$.sendparams"
              },
              "Next": "InvokeSender"
            },
            "InvokeSender": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:lambda:invoke",
              "Parameters": {
                "FunctionName": "${JobAgentSenderFunctionArn}",
                "InvocationType": "RequestResponse",
                "Payload": {
                "sendparams": "$.sendparams",
                "snstopic": "${SNSJobSubscriberTopicName}",
                "snstopicarn": "${SNSJobSubscriberTopicArn}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ClientExecutionTimeoutException",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 30,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "TimeoutSeconds": 900,
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.errorInfo",
                  "Next": "HandleError"
                }
              ],
              "Next": "EndState"
            },
            "HandleError": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:lambda:invoke",
              "Parameters": {
                "FunctionName": "${ErrorHandlerFunctionArn}",
                "Payload.$": "$",
                "errorInfo.$": "$.errorInfo"
              },
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "FailedExecution"
                }
              ],
              "Next": "DecideOnError"
            },
            "DecideOnError": {
              "Type": "Choice",
              "Choices": [
                {
                  "And": [
                    {
                      "Variable": "$.status_code",
                      "NumericEquals": 200
                    },
                    {
                      "Variable": "$.error_resend",
                      "IsPresent": false
                    }
                  ],
                  "Next": "SetErrorResend"
                }
              ],
              "Default": "FailedExecution"
            },
            "SetErrorResend": {
              "Type": "Pass",
              "Parameters": {
                "error_resend": true,
                "errorInfo_firstrun": "$.errorInfo",
                "Payload": "$"
              },
              "Next": "RouteRetry"
            },
            "RouteRetry": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.state",
                  "StringEquals": "InvokeJobScraper",
                  "Next": "InvokeJobScraper"
                },
                {
                  "Variable": "$.state",
                  "StringEquals": "InvokeJobStore",
                  "Next": "InvokeJobStore"
                },
                {
                  "Variable": "$.state",
                  "StringEquals": "InvokeSender",
                  "Next": "InvokeSender"
                }
              ],
              "Default": "FailedExecution"
            },
            "EndState": {
              "Type": "Succeed"
            },
            "FailedExecution": {
              "Type": "Fail"
            }
          }
        }
  JobAgentStateMachineLatestVer:
    Type: AWS::StepFunctions::StateMachineVersion
    Condition: CreateChildStack
    Properties:
      Description: This version points to the most recent revision of a state machine.
      StateMachineArn: !Ref JobAgentStateMachine
      StateMachineRevisionId: !GetAtt JobAgentStateMachine.StateMachineRevisionId
  JobAgentTriggerEvent:
    Type: AWS::Events::Rule
    Condition: CreateChildStack
    Properties:
      Name: !Sub "${BaseName}-trigger-event"
      Description:
        A scheduled event used to trigger the state machine and associated
        functions.
      ScheduleExpression: !Ref "EventSchedule"
      State: ENABLED
      Targets:
        - Id: TargetFunction
          Arn: !Ref JobAgentStateMachineLatestVer
          RoleArn: !GetAtt "JobAgentTriggerEventRole.Arn"
          Input: !Sub |
            {
              "source": "aws.events",
              "detail-type": "Scheduled Event to trigger JobAgent state machine",
              "detail": {
                "replacements": {},
                "SearchSettings": {
                  "lang_code": "${LangCode}",
                  "criteria": {
                    "offset": 0,
                    "result_limit": 10,
                    "sort": "recent",
                    "latitude": "",
                    "longitude": "",
                    "loc_group_id": [],
                    "loc_query": [],
                    "base_query": "your search query",
                    "city": [],
                    "country": [
                      "USA"
                    ],
                    "region": [],
                    "county": [],
                    "query_options": []
                  },
                  "facets": {
                    "normalized_country_code": [
                      "USA"
                    ],
                    "normalized_state_name": [],
                    "normalized_city_name": [],
                    "location": [],
                    "business_category": [
                      "amazon-web-services"
                    ],
                    "category": [
                      "project-program-product-management-technical",
                      "solutions-architect",
                      "project-program-product-management-non-tech"
                    ],
                    "schedule_type_id": [
                      "Full-Time"
                    ],
                    "employee_class": [],
                    "normalized_location": [],
                    "job_function": [],
                    "is_manager": [],
                    "is_intern": []
                  },
                  "headers": {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; rv:122.0) Gecko/20100101 Firefox/122.0",
                    "Accept": "application/json, text/plain, */*",
                    "Accept-Language": "${IETFCode},${LangCode};q=0.5",
                    "Accept-Encoding": "gzip, deflate, br",
                    "Referer": "https://www.amazon.jobs/${LangCode}/search",
                    "Connection": "keep-alive"
                  }
                },
                "DBSettings": {
                  "db_name": "dynamodb",
                  "table_name": "${JobAgentStoreTable}",
                  "sqs_queue_url": "${JobQueue}"
                },
                "SendSettings": {
                  "topic_arn": "${JobSubscriberTopic}",
                  "subject": "Your Amazon Jobs For {{today}}",
                  "default_intro": "Your Amazon jobs update for {{today}}:\nnew jobs: {{job_count}}\n\n",
                  "default_entry": "{{title}}, {{city}}\ndescription: {{description_short}}\nurl: {job_path}\napply url: {{url_next_step}}\n\n",
                  "email_intro": "<html><head></head><body><h1>Your Amazon Jobs Update for {{today}}</h1><br>new jobs: {{job_count}}<br>",
                  "email_entry": "<p><h2><a href='{{job_path}}'>{{title}}, {{city}}</a></h2></p>{{description_short}}</p><br><p><a href='{{url_next_step}}'>apply</a></p><br>",
                  "email_outro": "</body></html>",
                  "sms": "new_job: {{title}}, {{city}}\nurl: {{job_path}}\n"
                }
              }
            }
  JobAgentStackResourceGroup:
    Type: AWS::ResourceGroups::Group
    Condition: CreateChildStack
    DependsOn: JobAgentTriggerEvent
    Properties:
      Name: !Sub "${BaseName}-stack-resources-${HashSuffix}"
      Description: !Sub "Stack resource group for the ${BaseName} stack"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
      Tags:
        - Key: !Ref "TagKey"
          Value: !Ref TagKey
Outputs:
  DeploymentRoleArn:
    Description: Arn for deployment role
    Value: !GetAtt "JobAgentCFManagementRole.Arn"
  JobAgentS3Name:
    Description: Name of S3 bucket
    Value: !Ref "JobAgentBucket"
  Suffix:
    Description: Suffix for stack
    Value: !Ref "HashSuffix"
  ChildExists:
    Description: Whether child stack exists
    Value: !Ref ChildEnabled
  LambdaLayer:
    Description: Lambda layer for requests library
    Value: !Ref "RequestsLayer"
  StateMachineArn:
    Condition: CreateChildStack
    Description: Arn for the state machine
    Value: !Ref JobAgentStateMachineLatestVer
  TriggerEvent:
    Condition: CreateChildStack
    Description: Arn for the trigger event
    Value: !Ref JobAgentTriggerEvent
  TopicArn:
    Condition: CreateChildStack
    Description: Arn for the subscription
    Value: !Ref JobSubscriberTopic
  LambdaFuncs:
    Condition: CreateChildStack
    Description: Arns for the lambda functions
    Value:
      !Join [
        ",",
        [
          !GetAtt VarReplacerFunction.Arn,
          !GetAtt JobAgentScraperFunction.Arn,
          !GetAtt JobAgentStoreFunction.Arn,
          !GetAtt JobAgentSenderFunction.Arn,
          !GetAtt ErrorHandlerFunction.Arn,
        ],
      ]
