AWSTemplateFormatVersion: "2010-09-09"
Description: |
  CloudFormation template for automated deployment of Job alert agent. Creates a deployment role, lambda functions, a Step Function state machine, and necessary IAM roles and policies.
Parameters:
  YourEmail:
    Type: String
    AllowedPattern: |
      (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
    Description: Your email address for the SNS topic
    NoEcho: true
  BaseName:
    Type: String
    Description: Base name for resources
  BaseNameTitleCase:
    Type: String
    Description: Base name for resources using title case
  EventSchedule:
    Type: String
    Description: EventBridge schedule in appropriate format, e.g. rate(24 hours)
  LangCode:
    Type: String
    Description: Language code for job agent, e.g. 'en'
  LangCountryCode:
    Type: String
    Description: Language country code for job agent, e.g. 'US'
  TagKey:
    Type: String
    Description: Common tag key for resources
  BucketName:
    Type: String
    Description: S3 bucket name
  BucketArn:
    Type: String
    Description: S3 bucket ARN
Resources:
  JobAgentLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/states/${BaseName}-log-group/"
      RetentionInDays: 14
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-logs"
  JobAgentCloudTrailRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "cloudtrail.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${BaseNameTitleCase}TrailLogPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/cloudtrail/:*"
                  - !GetAtt "JobAgentLogGroup.Arn"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicy
                  - s3:PutBucketAcl
                Resource: !Ref "BucketArn"
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-log-role"
  JobAgentCloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Sub "${BaseNameTitleCase}Trail"
      CloudWatchLogsLogGroupArn: !GetAtt "JobAgentLogGroup.Arn"
      CloudWatchLogsRoleArn: !GetAtt "JobAgentCloudTrailRole.Arn"
      S3BucketName: !Ref "BucketName"
      IncludeGlobalServiceEvents: false
      IsLogging: true
      IsMultiRegionTrail: false
      EnableLogFileValidation: true
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-trail"
  JobAgentLambdaBaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${BaseNameTitleCase}LogPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource:
                  - !GetAtt "JobAgentLogGroup.Arn"
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-log-role"
  JobAgentStoreTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub "${BaseName}-store"
      AttributeDefinitions:
        - AttributeName: id_icims
          AttributeType: S
        - AttributeName: last_updated
          AttributeType: S
        - AttributeName: last_scrape
          AttributeType: S
        - AttributeName: posted_date
          AttributeType: S
        - AttributeName: date_off_market
          AttributeType: S
      BillingMode: PROVISIONED
      ContributorInsightsSpecification:
        Enabled: true
      DeletionProtectionEnabled: true
      GlobalSecondaryIndexes:
        - IndexName: last_scrape-index
          ContributorInsightsSpecification:
            Enabled: true
          KeySchema:
            - AttributeName: last_scrape
              KeyType: HASH
            - AttributeName: id_icims
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
        - IndexName: date_off_market-index
          ContributorInsightsSpecification:
            Enabled: true
          KeySchema:
            - AttributeName: id_icims
              KeyType: HASH
            - AttributeName: date_off_market
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
      KeySchema:
        - AttributeName: id_icims
          KeyType: HASH
        - AttributeName: last_updated
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: posted_date-index
          KeySchema:
            - AttributeName: id_icims
              KeyType: HASH
            - AttributeName: posted_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TableClass: STANDARD_INFREQUENT_ACCESS
      SSESpecification:
        SSEEnabled: false
      Tags:
        - Key: !Ref "TagKey"
          Value: job_db_store
  JobQueue:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      QueueName: !Sub "${BaseName}-queue-${AWS::AccountId}.fifo"
      FifoQueue: true
      MessageRetentionPeriod: 160000
      VisibilityTimeout: 400
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-queue-${AWS::AccountId}.fifo"
  JobQueueInlinePolicy:
    Type: AWS::SQS::QueueInlinePolicy
    Properties:
      Queue: !Ref "JobQueue"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt "JobQueue.Arn"
            Principal:
              Service:
                - !Sub "states.${AWS::URLSuffix}"
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref "JobAgentStateMachine"
          - Effect: Allow
            Action:
              - sqs.ReceiveMessage
              - sqs.DeleteMessage
              - sqs.GetQueueAttributes
              - sqs.PurgeQueue
            Resource: !GetAtt "JobQueue.Arn"
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt "JobAgentSenderFunction.Arn"
        Tags:
          - Key: !Ref "TagKey"
            Value: !Sub "${BaseName}-queue-policy"
  JobSubscriberTopic:
    Type: AWS::SNS::Topic
    Properties:
      ContentBasedDeduplication: true
      DisplayName: AMZN Job Agent Report
      ArchivePolicy: 2
      FifoTopic: true
      TopicName: !Sub "${BaseName}-topic.fifo"
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-topic.fifo"
  JobSubscriberTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${JobSubscriberTopic.TopicName}"
      Protocol: email
      Endpoint: !Ref "YourEmail"
  JobAgentTriggerEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "events.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${BaseNameTitleCase}TriggerEventRolePolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${BaseNameTitleCase}-StateMachine"
                  - !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:execution:${BaseNameTitleCase}-StateMachine:*"
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                  - xray:PutTelemetryRecords
                  - xray:PutTraceSegments
                Resource: !GetAtt "JobAgentLogGroup.Arn"
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-trigger-event-role"
  VarReplacerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${BaseName}-var-replacer"
      Handler: var_replacer.handler
      Role: !GetAtt "JobAgentLambdaBaseRole.Arn"
      Runtime: python3.11
      Code:
        S3Bucket: !Ref "BucketName"
        S3Key: var_replacer.zip
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-var-replacer"
  JobAgentScraperFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${BaseName}-job-scraper"
      Handler: job_scraper.handler
      Role: !GetAtt "JobAgentLambdaBaseRole.Arn"
      Runtime: python3.11
      Code:
        S3Bucket: !Ref "BucketName"
        S3Key: job_scraper.zip
      Layers:
        - arn:aws:serverlessrepo:us-east-1:554326023307:applications/Requests
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-job-scraper"
  JobAgentLambdaStoreRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${BaseNameTitleCase}LogPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: !GetAtt "JobAgentLogGroup.Arn"
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !GetAtt "JobAgentStoreTable.Arn"
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-log-role"
  JobAgentStoreFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${BaseName}-job-store"
      Handler: job_store.handler
      Role: !GetAtt "JobAgentLambdaStoreRole.Arn"
      Runtime: python3.11
      Code:
        S3Bucket: !Ref "BucketName"
        S3Key: job_store.zip
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-job-store"
  JobAgentLambdaSenderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "lambda.${AWS::URLSuffix}"
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${BaseNameTitleCase}LogPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: !GetAtt "JobAgentLogGroup.Arn"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:PurgeQueue
                Resource: !GetAtt "JobQueue.Arn"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref "JobSubscriberTopic"
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-log-role"
  JobAgentSenderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${BaseName}-job-sender"
      Handler: job_sender.handler
      Role: !GetAtt "JobAgentLambdaSenderRole.Arn"
      Runtime: python3.11
      Code:
        S3Bucket: !Ref "BucketName"
        S3Key: job_sender.zip
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-job-sender"
  ErrorHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${BaseName}-error-handler"
      Handler: error_handler.handler
      Role: !GetAtt "JobAgentLambdaBaseRole.Arn"
      Runtime: python3.11
      Code:
        S3Bucket: !Ref "BucketName"
        S3Key: error_handler.zip
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-error-handler"
  JobAgentStateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseName}-state-machine-execution-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "states.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${BaseNameTitleCase}StateMachineExecutionPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${BaseNameTitleCase}-StateMachine"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt "JobAgentScraperFunction.Arn"
                  - !GetAtt "JobAgentStoreFunction.Arn"
                  - !GetAtt "JobAgentSenderFunction.Arn"
                  - !GetAtt "ErrorHandlerFunction.Arn"
                  - !GetAtt "VarReplacerFunction.Arn"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt "JobQueue.Arn"
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource:
                  - !GetAtt "JobAgentLogGroup.Arn"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectVersionAcl
                  - s3:GetObjectVersionTagging
                  - s3:GetBucketAcl
                Resource: !Ref "BucketArn"
  JobAgentStateMachine:
    Type: AWS::StepFunctions::StateMachine
    DependsOn:
      - JobSubscriberTopic
      - JobSubscriberTopicSubscription
    Properties:
      StateMachineName: !Sub "${BaseNameTitleCase}-StateMachine"
      RoleArn: !GetAtt "JobAgentStateMachineExecutionRole.Arn"
      DefinitionS3Location:
        Bucket: !Ref "BucketName"
        Key: !Sub "${BaseName}-state-machine-definition.yaml"
      DefinitionSubstitutions:
        JobAgentScraperFunctionArn: !GetAtt "JobAgentScraperFunction.Arn"
        JobAgentScraperFunctionName: !Ref "JobAgentScraperFunction"
        JobAgentStoreFunctionArn: !GetAtt "JobAgentStoreFunction.Arn"
        JobAgentStoreFunctionName: !Ref "JobAgentStoreFunction"
        JobAgentSenderFunctionArn: !GetAtt "JobAgentSenderFunction.Arn"
        JobAgentSenderFunctionName: !Ref "JobAgentSenderFunction"
        JobAgentStoreTableName: !Ref "JobAgentStoreTable"
        JobAgentStoreTableArn: !GetAtt "JobAgentStoreTable.Arn"
        ErrorHandlerFunctionName: !Ref "ErrorHandlerFunction"
        ErrorHandlerFunctionArn: !GetAtt "ErrorHandlerFunction.Arn"
        VarReplacerFunctionName: !Ref "VarReplacerFunction"
        VarReplacerFunctionArn: !GetAtt "VarReplacerFunction.Arn"
        JobQueueUrl: !Sub "https://sqs.${AWS::URLSuffix}/${AWS::AccountId}/${JobQueue.QueueName}"
      StateMachineType: STANDARD
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt "JobAgentLogGroup.Arn"
        IncludeExecutionData: true
        Level: ALL
      Tags:
        - Key: !Ref "TagKey"
          Value: !Sub "${BaseNameTitleCase}-StateMachine"
  JobAgentTriggerEvent:
    Type: AWS::Events::Rule
    DependsOn:
      - JobSubscriberTopicSubscription
    Properties:
      Name: !Sub "${BaseName}-trigger-event"
      Description:
        A scheduled event used to trigger the state machine and associated
        functions.
      ScheduleExpression: !Ref "EventSchedule"
      State: ENABLED
      Targets:
        - Id: TargetFunction
          Arn: !GetAtt "JobAgentStateMachine.Arn"
          RoleArn: !GetAtt "JobAgentTriggerEventRole.Arn"
          Input: !Sub |
            {
              "source:" "aws.events",
              "detail-type": "Scheduled Event to trigger JobAgent state machine",
              "detail": {
                "replacements": {},
                "SearchSettings": {
                  "lang_code": "${LangCode}",
                  "criteria": {
                    "offset": 0,
                    "result_limit": 10,
                    "sort": "recent",
                    "latitude": "",
                    "longitude": "",
                    "loc_group_id": [],
                    "loc_query": [],
                    "base_query": "your search query",
                    "city": [],
                    "country": ["USA"],
                    "region": [],
                    "county": [],
                    "query_options": []
                  },
                  "facets": {
                    "normalized_country_code": ["USA"],
                    "normalized_state_name": [],
                    "normalized_city_name": [],
                    "location": [],
                    "business_category": ["amazon-web-services"],
                    "category": [
                      "project-program-product-management-technical",
                      "solutions-architect",
                      "project-program-product-management-non-tech"
                    ],
                    "schedule_type_id": ["Full-Time"],
                    "employee_class": [],
                    "normalized_location": [],
                    "job_function": [],
                    "is_manager": [],
                    "is_intern": []
                  },
                  "headers": {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; rv:122.0) Gecko/20100101 Firefox/122.0",
                    "Accept": "application/json, text/plain, */*",
                    "Accept-Language": "${LangCode}-${LangCountryCode},${LangCode};q=0.5",
                    "Accept-Encoding": "gzip, deflate, br",
                    "Referer": "https://www.amazon.jobs/${LangCode}/search",
                    "Connection": "keep-alive"
                  }
                },
                "DBSettings": {
                  "db_name": "dynamodb",
                  "table_name": "${JobAgentStoreTable}",
                  "sqs_queue_url": "https://sqs.${AWS::URLSuffix}/${AWS::AccountId}/${JobQueue.QueueName}"
                },
                "SendSettings": {
                  "topic_arn": "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${JobSubscriberTopic.TopicName}",
                  "subject": "Your Amazon Jobs For {{today}}",
                  "default_intro": "Your Amazon jobs update for {{today}}:\nnew jobs: {{job_count}}\n\n",
                  "default_entry": "{{title}}, {{city}}\ndescription: {{description_short}}\nurl: {job_path}\napply url: {{url_next_step}}\n\n",
                  "email_intro": "<html><head></head><body><h1>Your Amazon Jobs Update for {{today}}</h1><br>new jobs: {{job_count}}<br>",
                  "email_entry": "<p><h2><a href='{{job_path}}'>{{title}}, {{city}}</a></h2></p>{{description_short}}</p><br><p><a href='{{url_next_step}}'>apply</a></p><br>",
                  "email_outro": "</body></html>",
                  "sms": "new_job: {{title}}, {{city}}\nurl: {{job_path}}\n"
                }
              }
            }
